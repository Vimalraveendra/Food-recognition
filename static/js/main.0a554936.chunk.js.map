{"version":3,"sources":["components/ImageLinkForm/ImageLinkForm.js","components/FoodDisplay/FoodDisplay.js","containers/App.js","serviceWorker.js","index.js"],"names":["ImageLinkForm","onChangeEvent","onSubmit","input","className","value","type","onChange","onClick","FoodDisplay","imageUrl","foods","error","food","map","item","key","id","name","src","style","width","height","alt","length","particleOptions","particles","number","density","enable","value_area","app","Clarifai","App","apiKey","process","state","e","setState","target","models","predict","FOOD_MODEL","then","response","outputs","data","concepts","catch","err","params","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VAgCeA,G,YA9BM,SAAC,GAAmC,IAAlCC,EAAiC,EAAjCA,cAAcC,EAAmB,EAAnBA,SAASC,EAAU,EAAVA,MAE5C,OAEC,6BACC,6BACC,uBAAGC,UAAU,YACZ,2EAGD,yBAAKA,UAAU,WACd,yBAAKA,UAAU,uCACd,2BACAA,UAAU,cACVC,MAAOF,EACPG,KAAK,OACLC,SAAUN,IAEX,4BACAO,QAASN,EACTE,UAAU,iDAFV,eCsBSK,G,MAvCI,SAAC,GAA2B,IAA1BC,EAAyB,EAAzBA,SAASC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,MAC5BC,EAAOF,EAAMG,IAAI,SAAAC,GACf,OAAO,wBAAIX,UAAU,yCACpBY,IAAKD,EAAKE,IACV,8BACHF,EAAKG,MAEN,8BACCH,EAAKV,UAKJ,OAAGO,EAEA,wBAAIR,UAAU,YAAYQ,GAKlC,yBAAKR,UAAU,WACd,yBAAKA,UAAU,QACd,yBAAKe,IAAKT,EAAUU,MAAO,CAACC,MAAM,QAAQC,OAAO,SAAUC,IAAI,MAE/DV,EAAKW,OAAQ,GACd,yBAAKpB,UAAU,yCACd,wBAAIA,UAAU,WACZ,wBAAIA,UAAU,mBAAd,OAAoC,0BAAMA,UAAU,kBAAhB,gBACtCS,O,kCCvBAY,EAAiB,CAErBC,UAAW,CACRC,OAAO,CACLtB,MAAM,GACNuB,QAAQ,CACPC,QAAO,EACPC,WAAW,QAMbC,EAAM,IAAIC,IAASC,IAAI,CAC5BC,OAAOC,qCAuDOF,E,2MAlDdG,MAAM,CACLjC,MAAM,GACNO,SAAS,GACTC,MAAM,GACJC,MAAM,I,EAGPX,cAAgB,SAACoC,GACf,EAAKC,SAAS,CAACnC,MAAMkC,EAAEE,OAAOlC,S,EAGhCH,SAAU,WAET,EAAKoC,SAAS,CAAC5B,SAAS,EAAK0B,MAAMjC,QAChC,EAAKiC,MAAMjC,OACb4B,EAAIS,OAAOC,QAAUT,IAASU,WAAY,EAAKN,MAAMjC,OACpDwC,KAAK,SAAAC,GAAQ,OAAE,EAAKN,SAAS,CAC7B3B,MAAMiC,EAASC,QAAQ,GAAGC,KAAKC,aAE/BC,MAAM,SAAAC,GAAG,OAAEA,IACb,EAAKX,SAAS,CAACnC,MAAM,MAEtB,EAAKmC,SAAS,CAAC1B,MAAM,qC,wEAKpB,OACE,yBAAKR,UAAU,OACb,yBAAKA,UAAU,cAAf,oBAGI,kBAAC,IAAD,CAAWA,UAAU,YACrB8C,OAAQzB,IACR,kBAAC,EAAD,CACAxB,cAAekD,KAAKlD,cACpBC,SAAUiD,KAAKjD,SACfC,MAAOgD,KAAKf,MAAMjC,QAElB,kBAAC,EAAD,CACAO,SAAUyC,KAAKf,MAAM1B,SACrBC,MAAOwC,KAAKf,MAAMzB,MAClBC,MAAOuC,KAAKf,MAAMxB,a,GA3CZwC,aCdEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.0a554936.chunk.js","sourcesContent":["import React from 'react';\nimport './ImageLinkForm.css'\nconst ImageLinkForm =({onChangeEvent,onSubmit,input})=> {\n\t\n\t\treturn (\n\t\t\t\n\t\t\t<div>\n\t\t\t <div>\n\t\t\t \t<p className='f3 white'>\n\t\t\t \t{'The magic brain will detect the foods in your pictures. Give it a try.'}\n\t\t\t \t</p>\n\t\t\t </div>\n\t\t\t\t <div className='center1'>\n\t\t\t\t  <div className='center1 pa4 br3 shadow-5 background'>\n\t\t\t\t   <input \n\t\t\t\t   className='f4 pa2 w-70'\n\t\t\t\t   value={input}\n\t\t\t\t   type=\"text\"\n\t\t\t\t   onChange={onChangeEvent}\n\t\t\t\t   />\n\t\t\t   <button \n\t\t\t   onClick={onSubmit}\n\t\t\t   className='f5 w-30 pv2 ph3 grow bg-dark-green white link'\n\t\t\t   >\n\t\t\t   Detect</button>\n\t\t\t  </div>\n\t\t\t</div>\n\t\t  </div>\n\t\t)\n\t}\n\n\nexport default ImageLinkForm;\n","import React from 'react';\nimport './FoodDisplay.css'\n\nconst FoodDisplay =({imageUrl,foods,error})=> {\n\t const food=  foods.map(item=>{\n\t \t       return <li className=\" f6 bg-near-white br--top  mv2 center3\"\n\t\t \t       key={item.id}>\n\t\t \t       <span>\n\t\t\t\t \t {item.name}\n\t\t\t\t \t </span>\n\t\t\t\t \t <span>\n\t\t\t\t \t {item.value}\n\t\t\t\t     </span>\n\t\t\t\t \t </li>\n\t\t\t\t })\n\n         if(error){\n         \treturn(\n         \t\t <h3 className='f2 white'>{error}</h3>\n\t\t         \t\t)\n\t\t         }else{\n\t\t\treturn (\n\t\t\t\n\t\t\t\t<div className='center2'>   \n\t\t\t\t <div className='pa2 '>\n\t\t\t\t \t<img src={imageUrl} style={{width:'400px',height:'520px'}} alt=\"\"/>\n\t\t\t\t </div>\n\t\t\t\t {food.length> 0 &&\n\t\t\t\t <div className='ph0 br3 hidden ba b--black-10 display' >\t\t\n\t\t\t\t\t <ul className='mv0 ph0'>\n\t\t\t\t\t   <h2 className='center3 br3  f5'>Name<span className='center3 br3 f5'>Probability</span></h2>\n\t\t\t\t\t{food}\n\t\t\t\t\t\n\t\t             </ul>\n\t             </div>\n        }\n            </div>\t\t\n\t\t\n\t\t)\n\t}\n}\n\nexport default FoodDisplay;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ImageLinkForm from '../components/ImageLinkForm/ImageLinkForm';\nimport FoodDisplay from '../components/FoodDisplay/FoodDisplay';\nimport Clarifai from 'clarifai';\nimport Particles from 'react-particles-js';\n\n\nconst particleOptions ={\n\n  particles: {\n     number:{\n       value:80,\n       density:{\n        enable:true,\n        value_area:600\n       } \n     }\n  }\n}\n \nconst app = new Clarifai.App({\n apiKey:process.env.REACT_APP_API_KEY\n});\n\n\nclass App extends Component {\n\tstate={\n\t\tinput:'',\n\t\timageUrl:'',\n\t\tfoods:[],\n    error:''\n\t}\n\n   onChangeEvent = (e)=>{\n   \t this.setState({input:e.target.value})\n   }\n\n   onSubmit =()=>{\n    \n   \tthis.setState({imageUrl:this.state.input})\n    if(this.state.input){\n   \t app.models.predict(  Clarifai.FOOD_MODEL, this.state.input)\n   \t .then(response=>this.setState({\n      foods:response.outputs[0].data.concepts\n      }))\n     .catch(err=>err)\n    this.setState({input:''})\n   }else{\n   this.setState({error:'Sorry! Please enter a valid url'})\n }\n}\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"App-header\">\n           Food-Recognition\n        </div>\n            <Particles className='particles'\n            params={particleOptions} />\n            <ImageLinkForm \n            onChangeEvent={this.onChangeEvent}\n            onSubmit={this.onSubmit}\n            input={this.state.input}\n            />\n            <FoodDisplay\n            imageUrl={this.state.imageUrl}\n            foods={this.state.foods}\n            error={this.state.error}\n          />\n    </div>\n    );\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}